AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for provisioning a VPC, ALB, Auto Scaling Group, and a DynamoDB table, and configuring EC2 instances for Python application deployment.

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for the Auto Scaling Group.
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0d52ddcdf3a885741
    Description: AMI ID for the EC2 instances, which should have Python installed.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CustomVPC
        - Key: Project
          Value: Civita

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CustomInternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CustomPublicSubnet1

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CustomPublicSubnet2

  SubnetPublic3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CustomPublicSubnet3

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
      SecurityGroups:
        - !Ref SecurityGroupWeb
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: CustomALB

  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for web access and restricted SSH"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Permite tráfego HTTP de qualquer lugar
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Permita tráfego HTTPS se necessário
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 177.170.241.150/32  # SSH restrito ao IP do usuário

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic2
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic3
      RouteTableId: !Ref PublicRouteTable

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 20
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      TargetType: instance

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: 'EC2DynamoDBFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ListaDeContatos'
        - PolicyName: AccessS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::bucket-do-civita/*'
        - PolicyName: CloudWatchFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:DescribeAlarms'
                Resource: '*'

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2Role

  AutoScalingConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroupWeb
      KeyName: pedrotpcKeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip unzip
          pip3 install flask boto3

          # Criar o diretório para a aplicação, garantindo que todos os diretórios pais existam
          mkdir -p /var/www/html/appListaDeContatos

          # Baixar e descompactar o aplicativo do S3
          aws s3 cp s3://bucket-do-civita/app.py /var/www/html/appListaDeContatos/app.py
          aws s3 cp s3://bucket-do-civita/dynamo_service.py /var/www/html/appListaDeContatos/dynamo_service.py
          aws s3 cp s3://bucket-do-civita/home.html /var/www/html/appListaDeContatos/home.html

          # Verificar se os arquivos estão presentes
          if [ ! -f /var/www/html/appListaDeContatos/app.py ]; then echo "app.py não encontrado"; exit 1; fi
          if [ ! -f /var/www/html/appListaDeContatos/dynamo_service.py ]; then echo "dynamo_service.py não encontrado"; exit 1; fi
          if [ ! -f /var/www/html/appListaDeContatos/home.html ]; then echo "home.html não encontrado"; exit 1; fi

          # Criar e configurar o serviço Flask
          cat > /etc/systemd/system/flaskapp.service << EOF
          [Unit]
          Description=Flask Application
          After=network.target

          [Service]
          User=root
          WorkingDirectory=/var/www/html/appListaDeContatos
          ExecStart=/usr/bin/python3 app.py
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF

          # Habilitar e iniciar o serviço Flask
          systemctl daemon-reload
          systemctl enable flaskapp.service
          systemctl start flaskapp.service

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref AutoScalingConfiguration
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 3
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ListaDeContatos
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Name
          Value: ListaDeContatos
        - Key: Project
          Value: Civita

  CPUUtilizationAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarme quando a utilização da CPU ultrapassa 5%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 30
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  CPUUtilizationAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarme quando a utilização da CPU cai abaixo de 1%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 30
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 30

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 30

Outputs:
  ALBDNSName:
    Description: DNS Name for the Application Load Balancer. Use this URL to access the deployed application.
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALBDNSName"